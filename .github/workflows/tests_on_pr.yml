name: Tests

on:
  pull_request:
    branches:
      - 'master'
    paths-ignore:
      - '*.md'

jobs:
  test:
    name: Tests & Coverage
    runs-on: ubuntu-18.04
    continue-on-error: true
    env:
      GOOGLE_CLOUD_PROJECT_PATH: test-lab-dxpqby473161q-hj2c770js967m
      FIREBASE_PROJECT_ID: boletinhos-5b614
      # Set to true if we should run instrumentation tests with Firebase Test Lab.
      RUN_ON_FIREBASE_TEST_LAB: ${{ false }}
    if: "!contains(github.event.head_commit.message, '[skip-ci]')"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      # Generate development and tests APK
      - name: Assemble Development APK
        run: bash ./gradlew assembleDebug --stacktrace
        if: env.RUN_ON_FIREBASE_TEST_LAB == 'true'

      - name: Upload Development APK
        uses: actions/upload-artifact@v1
        with:
          name: apk-development
          path: android-ui/build/outputs/apk/debug/android-ui-debug.apk
        if: env.RUN_ON_FIREBASE_TEST_LAB == 'true'

      - name: Assemble Instrumentation Tests APK
        run: bash ./gradlew assembleDebugAndroidTest

      - name: Upload Instrumentation Tests APK
        uses: actions/upload-artifact@v1
        with:
          name: apk-tests
          path: android-ui/build/outputs/apk/androidTest/debug/android-ui-debug-androidTest.apk
        if: env.RUN_ON_FIREBASE_TEST_LAB == 'true'

      # Authenticate & Configure GCloud
      - name: Authenticate into GCloud
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: '270.0.0'
          service_account_key: ${{ secrets.FIREBASE_ADMIN_SERVICE_KEY }}
        if: env.RUN_ON_FIREBASE_TEST_LAB == 'true'

      - name: Configure GCloud project ID
        run: gcloud config set project $FIREBASE_PROJECT_ID
        if: env.RUN_ON_FIREBASE_TEST_LAB == 'true'

      # Run Instrumentation Tests on Firebase Test Lab
      - name: Run Instrumentation Tests
        run: >
          gcloud firebase test android run --type instrumentation
          --app android-ui/build/outputs/apk/debug/android-ui-debug.apk
          --test android-ui/build/outputs/apk/androidTest/debug/android-ui-debug-androidTest.apk
          --device model=Pixel2,version=28,locale=en_US,orientation=portrait
          --no-use-orchestrator
          --environment-variables coverage=true,coverageFile="/sdcard/coverage.ec"
          --directories-to-pull=/sdcard
          --no-record-video
        if: env.RUN_ON_FIREBASE_TEST_LAB == 'true'

      # Download Instrumentation Tests coverage report
      - name: Create Instrumentation Coverage folder
        run: mkdir -p instrumentation/coverage/
        if: env.RUN_ON_FIREBASE_TEST_LAB == 'true'

      - name: Download coverage file from Firebase Test Lab
        run: >
          gsutil cp -U gs://$GOOGLE_CLOUD_PROJECT_PATH/**/sdcard/*.ec $GITHUB_WORKSPACE/instrumentation/coverage/
        if: env.RUN_ON_FIREBASE_TEST_LAB == 'true'

      - name: Move Instrumentation Coverage to app outputs dir
        run: >
          mkdir -p android-ui/build/outputs/code-coverage/connected && cp instrumentation/coverage/*.ec android-ui/build/outputs/code-coverage/connected/coverage.ec
        if: env.RUN_ON_FIREBASE_TEST_LAB == 'true'

      # Run tests & generate code coverage report with Jacoco
      - name: Run tests & generate jacoco report
        run: bash ./gradlew test projectCodeCoverageReport --stacktrace

      # Upload coverage reports
      - name: Upload Jacoco Reports
        uses: actions/upload-artifact@v1
        with:
          name: jacoco-report
          path: build/reports/jacoco/html

      # Upload coverage to Codecov
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: build/reports/jacoco/boletinhos.xml
          fail_ci_if_error: true