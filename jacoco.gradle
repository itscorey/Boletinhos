import config.Jacoco

apply plugin: 'jacoco'

jacoco {
    toolVersion = Jacoco.version
}

configure(subprojects) {
    apply plugin: 'jacoco'

    jacoco {
        toolVersion = Jacoco.version
    }

    tasks.withType(Test) {
        jacoco.includeNoLocationClasses = true
    }

    tasks.withType(Test) {
        jacoco.includeNoLocationClasses = true
    }

    task jacocoReport(type: JacocoReport) {
        reports {
            csv.enabled = true
            xml.enabled = false
            html.enabled = true
        }

        def exclusions = [
            'android/**/*.*',
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            '**/*Module.*',
            '**/*Fake*.*',
            '**/*Module$Companion.*',
            '**/*Dagger*.*',
            '**/*MembersInjector*.*',
            '**/*_Provide*Factory*.*',
            '**/*_Factory.*',
            '**/*_MembersInjector.*',
            '**/Dagger*Component.*',
            '**/Dagger*Component$Builder.*',
            '**/*Module_*Factory$InstanceHolder.*',
            '**/injection/*',
            '**/di/*'
        ]

        def kotlinLibExclusions = [
            '**/*Test*.*',
            '**/*_Factory.*',
            '**/*Fake*.*'
        ]

        def javacTree = fileTree(dir: "$buildDir/intermediates/javac/debug", excludes: exclusions)
        def kotlinTree = fileTree(dir: "$buildDir/tmp/kotlin-classes/debug", excludes: exclusions)
        def kotlinLibTree = fileTree(dir: "$buildDir/classes/kotlin", excludes: kotlinLibExclusions)
        def mainSrc = "$project.projectDir/src/main/java"

        sourceDirectories.from = files([mainSrc])
        classDirectories.from = files([kotlinTree, javacTree, kotlinLibTree])
        executionData.from = fileTree(
            dir: buildDir,
            includes: [
                'jacoco/testDebugUnitTest.exec',
                'jacoco/test.exec',
                'outputs/code-coverage/connected/*.ec'
            ]
        )
    }
}

task projectCodeCoverageReport(type: JacocoReport) {
    def modulesTask = subprojects.jacocoReport

    dependsOn modulesTask

    additionalSourceDirs.from = files(modulesTask.sourceDirectories)
    sourceDirectories.from = files(modulesTask.sourceDirectories)

    classDirectories.from = files(modulesTask.classDirectories)
    executionData.from = files(modulesTask.executionData)

    reports {
        html.enabled = true
        html.destination = file('build/reports/jacoco/html')
        xml.enabled = true
        xml.destination = file('build/reports/jacoco/boletinhos.xml')
    }

    doFirst {
        executionData.from = files(executionData.findAll { it.exists() })
    }
}